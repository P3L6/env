#! /bin/bash

file="$HOME/.hh"

clearedOnce=false
printedOnce=false

printFile () {
  printPrefix() {
    lines=$(grep "^$1" < $file)
    lines=$(sed -n "s/^$1:/ \*/p" < $file)
    if [ ! -z "$lines" ]; then
      echo "$1:"
      echo "$lines"
      echo ""
    fi
  }

  if [ "$printedOnce" = true ]; then return; fi

  if [ "$1" != "noplans" ]; then
    printPrefix "Planned"
  fi
  printPrefix "Today"
  printPrefix "Tomorrow"
  printPrefix "QBI"

  printedOnce=true
}

clear () {
  if [ "$clearedOnce" = true ]; then return; fi

  sed -i.bak -n 's/Tomorrow/Planned/p'  $file
  echo "Welcome! Here's the plan for today:"
  printFile

  clearedOnce=true
}

autoClear () {
  # If file's modified timestamp is not from today, then clear it
  mod=$(stat -f "%m" $file)
  midnight=$(date -v 0H -v 0M -v 0S +"%s")
  if (( mod < midnight )); then
    clear
  fi
}

printHelp () {
  cat <<EOF
Notes:
  Use this program to record daily tasks at the command line, and
  then report them for the end of day stand up (ie Happy Hour - hh).

  You can also record things you plan to do tomorrow, and each day
  it automatically move the tasks from tomorrow to planned, so you
  can see what you intended to do today.

Usage options:
  hh            | Print summary of tasks
  hh <Task>     | Add a new task from today
  hh -t <Task>  | Add a new task for tomorrow
  hh -q <Block> | Add a new QBI item
  hh -p <Task>  | Manually add a planned task

Other options:
  hh --post     | Make shortcut substitutions, and copy RTF to clipboard
  hh -c         | Manual clear, move anything from 'tomorrow'
                | to 'planned', and delete the rest. (This should
                | automatically happen each day.)
  hh -y         | Print yesterday's file. Useful if it autoclears
                | before you had a chance to post
  hh --help     | Print this help
  hh -e         | Edit raw data file, for debugging. (Warning: opens vim)
EOF
}

if [ -e $file ]; then
  autoClear
else
  touch $file
  echo "It looks like this may be your first time running hh!"
  echo "Here's some helpful info: (see again with hh --help)"
  echo
  printHelp
fi

if [[ $# == 0 ]]; then
  printFile
  exit
fi

case "$1" in
  -e)
    vim $file
    ;;
  -c)
    clear
    ;;
  -t)
    shift
    echo "Tomorrow: $*" >> $file
    ;;
  -q) # questions, blockers, interesting
    shift
    echo "QBI: $*" >> $file
    ;;
  -p)
    shift
    echo "Planned: $*" >> $file
    ;;
  --post)
    # TODO what about if used with --yesterday
    # fonts end up tiny for some reason?
    # maybe add bold to headers
    printFile noplans | \
    sed -E "s|PR ?([0-9]+)|[PR]\($HH_PULL_URL\1\)|g" | \
    tee /dev/tty | \
    pandoc --from gfm --to html | \
    textutil -convert rtf -stdin -stdout -format html -fontsize 12 | \
    pbcopy
    ;;
  --help)
    printHelp
    ;;
  --yesterday | -y)
    if [ "$clearedOnce" = true ]; then
      # autocleared
      printedOnce=false
      echo "\nYesterday's report:"
    fi
    file=$file.bak
    printFile
    ;;
  *)
    echo "Today: $*" >> $file
esac

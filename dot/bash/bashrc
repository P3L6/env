## path
PATH=$PATH:$HOME/var/env/bin
PATH="$HOME/.cargo/bin:$PATH"
WRKSP=$HOME/var

## svn aliases
export SVN_EDITOR=vim
export EDITOR=vim
alias snv='svn'
alias ss='svn stat'
alias resolve='svn resolve --accept working'
alias sup='svn info | grep "Revision"; svn update'

## navigation
function up { path=""; if [ $1 ]; then for i in $(seq 1 $1); do path=$path"../"; done; else path="../"; fi; cd $path; } # usage: $up 2
alias back='cd -'  # previously: 'cd $OLDPWD'
function cdl { cd $@   &&   ls -halF; } # change to a directory and print out contents
function mkcd { mkdir $@   &&  cd $@; }
alias desk='cd ~/Desktop'
alias doc='cd ~/Documents'
alias down='cd ~/Downloads'
function var { cd $WRKSP/$@/; }

## bash extensions and misc
bind "set completion-ignore-case on"
bind "set show-all-if-ambiguous on"
export HISTCONTROL=ignoredups

## command shortcuts
alias which='type -a'
alias dush='du -sh'
function wtf () ( shopt -s dotglob; du -shc * | sort -h; )
alias ip='ifconfig | grep "inet " | grep -v 127.0.0.1 | cut -d\  -f2'
alias top='open -a Activity\ Monitor.app'
alias igrep='egrep -i'
alias diff='diff -u'

## ls extension
alias l='ls -halF'
alias lc='ls -halFG'

## git aliases
alias g='git'
alias gs='git status'
alias branch='git branch'
alias stash='git stash'
alias co='git checkout'
alias unpushed='git log @{upstream}..'
alias unpulled='git fetch; git log ..@{upstream}'
alias status='git status'
alias commit='git commit'

## file opening aliases
alias proj='open *.xc[ow][do][er][pk]*' # .xcodeproj or .xcworkspace
alias edit='vim'
alias readme='less *[Rr][Ee][Aa][Dd]*[Mm][Ee]*'

## cd to current finder window
cdf() {
    target=`osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)'`
    if [ "$target" != "" ]; then
        cd "$target"; pwd
    else
        echo 'No Finder window found' >&2
    fi
}
alias finder='cdf'

## Hacks to enable dark mode on older applications. $enable-dark-mode /Applications/Slack.app
enable-dark-mode() {
  defaults write "${1}/Contents/Info.plist" NSRequiresAquaSystemAppearance false
}
disable-dark-mode() {
  defaults delete "${1}/Contents/Info.plist" NSRequiresAquaSystemAppearance
}

## Custom Prompt
function bash_git_branch
{
  # first option branch name, second option is detached head
  _br=$(git symbolic-ref -q --short HEAD 2> /dev/null || git  rev-parse --short HEAD 2> /dev/null)
  if [ ! -z $_br ]; then printf "[%s]" $_br; fi
}
# [branch]:folder$
PS1='\[\e[0;32m\]$(bash_git_branch)\[\e[m\]:\[\e[0;36m\]\W\[\e[m\]\$ '
# Unset the tab title when displaying a new prompt. ie, clears ssh connection info
export PROMPT_COMMAND="echo -ne '\033]0;\007';$PROMPT_COMMAND"

## tab completion for git repos folders under workspace
function _workspaces()
{
    local curw
    COMPREPLY=()
    curw=${COMP_WORDS[COMP_CWORD]}
    COMPREPLY=($(compgen -W '$(ls $WRKSP)' -- $curw))
    return 0
}
complete -F _workspaces -o dirnames var


## tab completion for git branches
function _branches()
{
    local curw
    local branches
    COMPREPLY=()
    curw=${COMP_WORDS[COMP_CWORD]}
    branches=$(git for-each-ref --format='%(refname:short)' refs/heads/)
    COMPREPLY=($(compgen -W '$branches' -- $curw))
    return 0
}
complete -F _branches co


# This is a very simple bookmarks/shortcut thing, Bookmarks are hardcoded in a switch case
# A good enhancement would be storing this in a config file
function goto() {
  for bookmark in $@
  do
    case "$bookmark" in
      notes | note ) open -a Quiver ;;
      env ) atom ~/var/env ;;
      derived | build ) cd ~/Library/Developer/Xcode/DerivedData/Eggplant*/Build/Products/Development/Eggplant.app ;;
      today | things ) open -a Things ;;
      qmk | keyboards ) cd ~/var/Qmk/qmk_firmware; atom keyboards; echo make tada68:paulLayout:bin ;;

      goto ) echo Please update goto to be more configurable ;;
      * ) echo Unknown Bookmark: $bookmark;;
    esac
  done
}
